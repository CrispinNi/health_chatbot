{"version":3,"sources":["components/ChatInterface.jsx","App.jsx","index.js"],"names":["ChatInterface","messages","setMessages","useState","inputMessage","setInputMessage","isLoading","setIsLoading","messagesEndRef","useRef","userId","Math","random","toString","substr","React","createElement","className","MessageCircle","map","message","index","key","type","content","disclaimer","AlertCircle","ref","onSubmit","async","e","preventDefault","trim","prev","response","fetch","current","method","headers","body","JSON","stringify","data","json","error","console","value","onChange","target","placeholder","disabled","Send","App","ReactDOM","createRoot","document","getElementById","render"],"mappings":"gKA+HeA,MA3HOA,KACpB,MAAOC,EAAUC,GAAeC,mBAAS,KAClCC,EAAcC,GAAmBF,mBAAS,KAC1CG,EAAWC,GAAgBJ,oBAAS,GACrCK,EAAiBC,iBAAO,MACxBC,EAASD,iBAAO,QAAQE,KAAKC,SAASC,SAAS,IAAIC,OAAO,EAAG,IAyCnE,OACEC,IAAAC,cAAA,OAAKC,UAAU,gDAEbF,IAAAC,cAAA,OAAKC,UAAU,uCACbF,IAAAC,cAAA,MAAIC,UAAU,4DACZF,IAAAC,cAACE,IAAa,CAACD,UAAU,kBAAkB,8BAG7CF,IAAAC,cAAA,KAAGC,UAAU,sBAAqB,yEAMpCF,IAAAC,cAAA,OAAKC,UAAU,mDACZhB,EAASkB,IAAI,CAACC,EAASC,IACtBN,IAAAC,cAAA,OACEM,IAAKD,EACLJ,UAAW,SAAyB,SAAjBG,EAAQG,KAAkB,cAAgB,kBAE7DR,IAAAC,cAAA,OACEC,UAAW,+BACQ,SAAjBG,EAAQG,KACJ,yBACiB,UAAjBH,EAAQG,KACR,0BACA,uBAGNR,IAAAC,cAAA,KAAGC,UAAU,uBAAuBG,EAAQI,SAC3CJ,EAAQK,YACPV,IAAAC,cAAA,OAAKC,UAAU,mFACbF,IAAAC,cAACU,IAAW,CAACT,UAAU,iCACvBF,IAAAC,cAAA,SAAII,EAAQK,gBAMrBnB,GACCS,IAAAC,cAAA,OAAKC,UAAU,sBACbF,IAAAC,cAAA,OAAKC,UAAU,qCACbF,IAAAC,cAAA,OAAKC,UAAU,kBACbF,IAAAC,cAAA,OAAKC,UAAU,oDACfF,IAAAC,cAAA,OAAKC,UAAU,8DACfF,IAAAC,cAAA,OAAKC,UAAU,iEAKvBF,IAAAC,cAAA,OAAKW,IAAKnB,KAIZO,IAAAC,cAAA,QAAMY,SA5FWC,UAEnB,GADAC,EAAEC,iBACG3B,EAAa4B,OAAlB,CAGA9B,EAAY+B,GAAQ,IAAIA,EAAM,CAC5BV,KAAM,OACNC,QAASpB,KAGX,IACE,MAAM8B,QAAiBC,MAAM,8BAA8BzB,EAAO0B,QAAW,CAC3EC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CAAEjB,QAASpB,MAG7BsC,QAAaR,EAASS,OAG3BzC,EAAY+B,GAAQ,IAAIA,EAAM,CAC5BV,KAAM,MACNC,QAASkB,EAAKR,SACdT,WAAYiB,EAAKjB,cAEnB,MAAOmB,GACPC,QAAQD,MAAM,SAAUA,GACxB1C,EAAY+B,GAAQ,IAAIA,EAAM,CAC5BV,KAAM,QACNC,QAAS,qEAEZ,QACCjB,GAAa,MA0DiBU,UAAU,uCACtCF,IAAAC,cAAA,OAAKC,UAAU,cACbF,IAAAC,cAAA,SACEO,KAAK,OACLuB,MAAO1C,EACP2C,SAAWjB,GAAMzB,EAAgByB,EAAEkB,OAAOF,OAC1CG,YAAY,+BACZhC,UAAU,mGACViC,SAAU5C,IAEZS,IAAAC,cAAA,UACEO,KAAK,SACL2B,SAAU5C,EACVW,UAAU,2GAEVF,IAAAC,cAACmC,IAAI,CAAClC,UAAU,iBC5GbmC,MARf,WACE,OACErC,IAAAC,cAAA,OAAKC,UAAU,4BACbF,IAAAC,cAAChB,EAAa,QCFPqD,IAASC,WAAWC,SAASC,eAAe,SACpDC,OAAO1C,IAAAC,cAACoC,EAAG,Q","file":"static/js/main.91b490ff.chunk.js","sourcesContent":["import React, { useState, useRef} from 'react';\r\nimport { MessageCircle, Send, AlertCircle } from 'lucide-react';\r\n\r\n\r\nconst ChatInterface = () => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [inputMessage, setInputMessage] = useState(''); \r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const messagesEndRef = useRef(null);  \r\n  const userId = useRef(`user-${Math.random().toString(36).substr(2, 9)}`); \r\n\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    if (!inputMessage.trim()) return;\r\n\r\n    // Use inputMessage instead of userMessage\r\n    setMessages(prev => [...prev, {\r\n      type: 'user',\r\n      content: inputMessage  \r\n    }]);\r\n\r\n    try {\r\n      const response = await fetch(`http://127.0.0.1:8000/chat/${userId.current}`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ content: inputMessage }) \r\n      });\r\n    \r\n     const data = await response.json();\r\n\r\n      // Add bot response to chat\r\n      setMessages(prev => [...prev, {\r\n        type: 'bot',\r\n        content: data.response,\r\n        disclaimer: data.disclaimer\r\n      }]);\r\n    } catch (error) {\r\n      console.error('Error:', error);\r\n      setMessages(prev => [...prev, {\r\n        type: 'error',\r\n        content: 'Sorry, I had trouble processing your request. Please try again.'\r\n      }]);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex flex-col h-screen max-w-4xl mx-auto p-4\">\r\n      {/* Header */}\r\n      <div className=\"bg-white shadow-sm p-4 rounded-t-lg\">\r\n        <h1 className=\"text-2xl font-bold text-gray-800 flex items-center gap-2\">\r\n          <MessageCircle className=\"text-blue-500\" />\r\n          Hospital Virtual Assistant\r\n        </h1>\r\n        <p className=\"text-gray-600 mt-2\">\r\n          Ask me about your health concerns and I'll provide general guidance.\r\n        </p>\r\n      </div>\r\n\r\n      {/* Chat Messages */}\r\n      <div className=\"flex-1 overflow-y-auto p-4 space-y-4 bg-gray-50\">\r\n        {messages.map((message, index) => (\r\n          <div\r\n            key={index}\r\n            className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}\r\n          >\r\n            <div\r\n              className={`max-w-[80%] p-4 rounded-lg ${\r\n                message.type === 'user'\r\n                  ? 'bg-blue-500 text-white'\r\n                  : message.type === 'error'\r\n                  ? 'bg-red-100 text-red-700'\r\n                  : 'bg-white shadow-sm'\r\n              }`}\r\n            >\r\n              <p className=\"whitespace-pre-wrap\">{message.content}</p>\r\n              {message.disclaimer && (\r\n                <div className=\"mt-3 pt-3 border-t border-gray-200 text-sm text-gray-600 flex items-start gap-2\">\r\n                  <AlertCircle className=\"w-4 h-4 mt-0.5 flex-shrink-0\" />\r\n                  <p>{message.disclaimer}</p>\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n        ))}\r\n        {isLoading && (\r\n          <div className=\"flex justify-start\">\r\n            <div className=\"bg-white p-4 rounded-lg shadow-sm\">\r\n              <div className=\"flex space-x-2\">\r\n                <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\" />\r\n                <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce delay-100\" />\r\n                <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce delay-200\" />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n        <div ref={messagesEndRef} />\r\n      </div>\r\n\r\n      {/* Input Form */}\r\n      <form onSubmit={handleSubmit} className=\"p-4 bg-white shadow-sm rounded-b-lg\">\r\n        <div className=\"flex gap-2\">\r\n          <input\r\n            type=\"text\"\r\n            value={inputMessage}\r\n            onChange={(e) => setInputMessage(e.target.value)}\r\n            placeholder=\"Type your health question...\"\r\n            className=\"flex-1 p-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n            disabled={isLoading}\r\n          />\r\n          <button\r\n            type=\"submit\"\r\n            disabled={isLoading}\r\n            className=\"bg-blue-500 text-white p-2 rounded-lg hover:bg-blue-600 disabled:opacity-50 disabled:cursor-not-allowed\"\r\n          >\r\n            <Send className=\"w-5 h-5\" />\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatInterface;","import React from 'react';\r\nimport ChatInterface from './components/ChatInterface';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-100\">\r\n      <ChatInterface />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport App from \"./App\";\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\r\nroot.render(<App />);\r\n"],"sourceRoot":""}